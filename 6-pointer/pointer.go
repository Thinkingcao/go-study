package main

import "fmt"

func main() {
	a, b := 1, 2
	swap(&a, &b)
	fmt.Println("a=", a, "b=", b)
}

func swap(a, b *int) {
	var tmp int = *a
	*a = *b
	*b = tmp
}

//func swap(a, b int) {
//	var tmp = a
//	a = b
//	b = tmp
//}
//我根据实战经验总结了以下几点使用指针的建议，供你参考：
//
//不要对 map、slice、channel 这类引用类型使用指针；
//
//如果需要修改方法接收者内部的数据或者状态时，需要使用指针；
//
//如果需要修改参数的值或者内部数据时，也需要使用指针类型的参数；
//
//如果是比较大的结构体，每次参数传递或者调用方法都要内存拷贝，内存占用多，这时候可以考虑使用指针；
//
//像 int、bool 这样的小数据类型没必要使用指针；
//
//如果需要并发安全，则尽可能地不要使用指针，使用指针一定要保证并发安全；
//
//指针最好不要嵌套，也就是不要使用一个指向指针的指针，虽然 Go 语言允许这么做，但是这会使你的代码变得异常复杂。
